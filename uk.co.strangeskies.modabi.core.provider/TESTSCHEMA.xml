<?xml version="1.0" ?>
<schema
	xmlns="http://modabi.strangeskies.co.uk/2014-01-01/"
	name="ScriptingSchema">

	<dependencies>
		BaseSchema
	</dependencies>

	<imports>
		java.lang.Object,

		javax.script.ScriptEngineManager,
		javax.script.ScriptEngine,
		javax.script.Invocable,

		uk.co.strangeskies.reflection.token.TypeToken,
		uk.co.strangeskies.reflection.token.TypeToken.Infer,

		uk.co.strangeskies.modabi.scripting.ScriptObject,
		uk.co.strangeskies.modabi.scripting.ScriptObjectBuilder,
		uk.co.strangeskies.modabi.processing.ProcessingContext,
		uk.co.strangeskies.modabi.schema.Model
	</imports>

	<types />

	<models>
		<model
			name="scriptObject"
			type="@Infer ?"
			abstractness="ABSTRACT">

			<node
				format="complex"
				initializeInput="provide(ScriptEngineManager.class)">

				<input>
					<!-- method taking two parameters on the current target object, with 
						the result assigned as the new target object -->
					<assign>
						<target />
						<method name="hello">
							<target />
							<!-- empty provide means "provide the type of the enclosing binding 
								point" -->
							<provide />
							<cast type="SomeType">
								<binding>someNode</binding>
							</cast>
						</method>
					</assign>

					target = target.hello(provide(), (SomeType)
					bindingResult(${somenamespace:someNode}))
				</input>

				<bind
					name="objectName"
					condition="?"
					model="string" />

				<bind
					name="objectType"
					type="TypeToken{?}"
					outputField="null">

					<data initializeInput="provide(ProcessingContext.class)">
						<bind
							name="getBindingNode"
							outputField="null"
							postInputType="Model{?}"
							chainedInput="true"
							castInput="true"
							model="int">

							<value>1</value>
						</bind>

						<inputSequence
							name="dataType"
							chainedInput="true" />
					</data>
				</bind>

				<bind
					name="script"
					type="string">

					<condition>
						<optional />
					</condition>

					<content />
				</bind>

				<bind
					name="resource"
					type="string">

					<condition>
						<isNotBound binding="script" />
					</condition>

					<property />
				</bind>

				<bind
					name="language"
					type="string">

					<condition>
						<or>
							<isBound binding="script" />
							<optional />
						</or>
					</condition>

					<property />
				</bind>

				<bindInput
					name="create"
					chainedInput="true" />

				<inputSequence
					name="cast"
					chainedInput="true" />

				<!-- TEST FORM OF REFERENCES: -->
				<!-- expected -->
				<bind model="reference">
					<data>
						<bind name="targetModel">someModel</bind>

						<bind name="targetId">id</bind>

						<value>123</value>
					</data>
				</bind>

				<!-- better? -->
				<bind model="reference">
					<data>
						<value
							model="reference"
							targetModel="hello">

							theName
						</value>
					</data>
				</bind>

				<!-- better??? -->
				<bind model="reference">
					<value
						model="reference"
						targetModel="hello">

						theName
					</value>
				</bind>

				<!-- alternative collapse??? -->
				<bind model="reference">
					<data
						model="reference"
						targetModel="hello">

						theName
					</data>
				</bind>

				<!-- ideal -->
				<bind
					model="reference"
					targetModel="hello"
					targetId="name">

					theName
				</bind>
			</node>
		</model>
	</models>
</schema>
