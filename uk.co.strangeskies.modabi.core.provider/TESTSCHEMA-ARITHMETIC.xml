<?xml version="1.0" ?>
<schema
  xmlns="http://modabi.strangeskies.co.uk/2014-01-01/"
  xmlns:sai="http://saiman.co.uk/2015-10-08/"
  name="sai:PeriodicTableSchema">

  <imports>
    uk.co.strangeskies.reflection.token.TypeToken.Infer,
    java.util.Collection,
    java.util.List,
    uk.co.saiman.chemistry.Element.Group,
    uk.co.saiman.chemistry.PeriodicTable,
    uk.co.saiman.chemistry.Element,
    uk.co.saiman.chemistry.isotope.Isotope
  </imports>

  <dependencies>
    BaseSchema
  </dependencies>

  <types />

  <models>
    <model
      name="sai:expression"
      dataType="Expression<@Infer ?>"
      concrete="false" />

    <model
      name="sai:addition"
      base="sai:expression"
      pattern="$left + $right">

      <!-- Pattern generates $left and $right symbols as a generative grammar... -->

      <!-- since expression is abstract, it is equivalent to a symbol which 
        produces the patterns of all the models which extend it -->

      <bind
        name="sai:left"
        model="sai:expression"
        input="void" />

      <bind
        name="sai:right"
        model="sai:expression"
        input="void" />

      <bind input="target = new Addition($sai:left, $sai:right)" />
    </model>

    <model
      name="sai:division"
      base="sai:expression"
      pattern="$left / $right">

      <bind
        name="sai:left"
        model="sai:expression"
        input="void" />

      <bind
        name="sai:right"
        model="sai:expression"
        input="void" />

      <bind input="target = new Division($sai:left, $sai:right)" />
    </model>

    <model
      name="sai:integer"
      base="sai:expression"
      pattern="[0-9]*">

      <!-- If the pattern is terminating (i.e. contains no instances of $namespace:name) 
        then we can consume a String from the provisions -->

      <!-- Perhaps we can also consume something like a ParseState?? That 
        way we can re-use existing Java library parsers. This would make the pattern 
        attribute redundant. -->

      <bind
        name="sai:sub"
        model="sai:expression"
        input="void" />

      <bind input="target = Integer.parseInt(@String)" />
    </model>
  </models>
</schema>
